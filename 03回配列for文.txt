//////////////////////前提
変数が理解できている。
letが書ける。
;が書ける。
任意の変数名を作れる。
console.log()でコンソールに表示出来る
/////////////////////前提



配列というものがあります。

let a = [1,2,3,4,5];

上記のように書きます。
この配列を使うには、 a[3] というようにしてアクセスします。

[]の中に数字を入れてアクセスします。a[3]はaという配列の3番目にアクセスするという意味です。
配列は変数が沢山並んでいる物と思ってください。


それでは表示させてみましょう。

index.html ファイルを作り、「03回：配列for文」フォルダの中に保存します。
<!DOCTYPE html>
<html>
    <head>
        <title>js</title>
        <script src="./main.js"></script>
    </head>
    <body>
    </body>
</html>
上記のようにファイルの中に書きます。
main.jsファイルを作り、「03回：配列for文」フォルダの中に保存します

console.log(a[3]);


上記のようにファイルの中に書くと 4 Google Chromeでデベロッパツールを確認すると。
4
が表示されると思います。
//////////////////////演習1/////////////////////


では作った配列を全て表示させてみましょう。
console.log(a[0]);
console.log(a[1]);
console.log(a[2]);
console.log(a[3]);
console.log(a[4]);
上記のように書いて main2.js ファイルを作り、「03回：配列for文」フォルダの中に保存します


そして

<!DOCTYPE html>
<html>
    <head>
        <title>js</title>
        <script src="./main2.js"></script>
    </head>
    <body>
    </body>
</html>

ファイル名を変えたので<script src="./main2.js"></script>のように main2.jsを指定しないとファイルが読み込まれません。
 ※ 今回以降の演習ではindex系のhtmlファイルは中のmain系jsファイルのパスに気を付けて作成してください。
上記をindex2.html ファイルを作って、「03回：配列for文」フォルダの中に保存します。



//////////////////////演習2/////////////////////
1
2
3
4
5
と表示されたと思います。






配列は変数が沢山並んでいる物と思ってください。
１つ１つに分解するとこんな感じに書けます。

let a0 = 1;
let a1 = 2;
let a2 = 3;
let a3 = 4;
let a4 = 5;

表示させるには console.log(a3) と書きます。
4　が表示されたと思います。

では、1から30まで数字を表示させてみましょう。

「03回：配列for文」フォルダにindex3.htmlを作成し
<!DOCTYPE html>
<html>
    <head>
        <title>js</title>
        <script src="./main3.js"></script>
    </head>
    <body>
    </body>
</html>
上記のようにファイルの中に書きます。

「03回：配列for文」フォルダにmain3.jsを作成し保存します
//////////////////////演習3/////////////////////
お疲れさまでした。




for文という文法があります。

for (let i = 0; i < 5; i++) {
  console.log(i);
}
上記のように書きます。

let i = 0 の部分は「iという変数に0を代入」　　　という意味です。そして
i < 5 　　の部分は「iが5より少ない場合は正しい」という意味です。そして
i++ 　　　の部分は「iが1ずつ増えていく」　　　　という意味です。

３つの意味を合わせると「iが0から始まり、5より少ない数まで1ずつ増える」です。
　　　少し言い換えると「iが0から始まり、4まで1ずつ増える」です。


これを書いて動かしてみましょう
「03回：配列for文」フォルダにindex4.htmlを作成し
「03回：配列for文」フォルダにmain4.jsを作成し保存します
//////////////////////////////演習4///////////////////
0
1
2
3
4
と表示されたと思います。

ではfor文の条件を変えて1から30まで表示させてみましょう。
「03回：配列for文」フォルダにindex5.htmlを作成し
「03回：配列for文」フォルダにmain5.jsを作成し保存します
//////////////////////////////演習5///////////////////
先ほどは苦労して書いて30個表示させていたものが、
今回はfor文の条件を変えただけで30個表示できたと思います。
このあたりがfor文の便利なところです。


では次は、配列とfor文を組み合わせてみしょう。

let a = [1,2,3,4,5];

for (let i = 0; i < 5; i++) {
    console.log(a[i]);
}

上記のように書くと
1
2
3
4
5
と表示されます。

配列は添え字というインデックスというもので使うことが出来ます。

a[i]と書いているa[]の中にiという変数を入れて使っていますが、このiが添え字というインデックスになっています。
今回はiは0から4まで1ずつ増えます。
配列の0番目から4番目まで使うということです。

配列の番号は0番から始まります。
なので、最初の要素を使うには　a[0]　と書いて使います。

下記のように書いて表示させて確認してみましょう。
console.log(a[0]);
「03回：配列for文」フォルダにindex6.htmlを作成し
「03回：配列for文」フォルダにmain6.jsを作成し保存します
////////////////////////////演習6///////////////

1

と表示されたと思います


では次は、配列の要素を変更します。

let a = [1,2,3,4,5];

という配列の中身を書き換えてみましょう。

a[3] = 999;

上記のように書いて表示を確かめてみましょう。

for (let i = 0; i < 5; i++) {
    console.log(a[i]);
}

「03回：配列for文」フォルダにindex7.htmlを作成し
「03回：配列for文」フォルダにmain7.jsを作成し保存します
//////////////////////演習7/////////////////////
1
2
3
999
5

と表示されたと思います

ちなみに let i = 0;　の i と書いているのはIntの略という説だったりIndexの略という説などあります。
頭文字の i ということです。なのでletとjavascriptは書く場合が多いのでlという名前にしても良いし、もしくは他の名前でもよいですが、
一般的にはiと書く人が多いようです。
IntとはC言語の型の名前です。
Indexとは索引という意味で、索引とは本の後ろに載っている字引のことです。



次は配列の要素を追加してみましょう。

let a = [1,2,3,4,5];

for (let i = 0; i < 5; i++) {
    console.log(a[i]);
}

a.push(6);

for (let i = 0; i < 6; i++) {
    console.log(a[i]);
}

上記のように書いて確認してみましょう。
「03回：配列for文」フォルダにindex8.htmlを作成し
「03回：配列for文」フォルダにmain8.jsを作成し保存します
////////////////////////////演習8//////////////

ここまでは、配列を作るのに
let a = [1,2,3,4,5];
というように書いていましたが、配列の要素を追加する方法を使うとfor文と組み合わせて沢山の要素を作れます。

下記のように書けます。

let a = [1,2,3,4,5];

for (let i = 6; i < 30; i++) {
    a.push(i);
}

for (let i = 0; i < 30; i++) {
    console.log(a[i]);
}

上記のように書いて確認してみましょう。
「03回：配列for文」フォルダにindex9.htmlを作成し
「03回：配列for文」フォルダにmain9.jsを作成し保存します
/////////////////////演習9///////////////////////
1から30まで表示されたと思います。

配列の作り方ですが、
let a = [];
という書き方ができます。
なので、下記のように配列を作ることができます。

let a = [];
for (let i = 0; i < 30; i++) {
    a.push(i);
}

この配列の中身を確認してみましょう。

for (let i = 0; i < 30; i++) {
    console.log(a[i]);
}

「03回：配列for文」フォルダにindex10.htmlを作成し
「03回：配列for文」フォルダにmain10.jsを作成し保存します
/////////////////////演習10///////////////////////


次は配列の要素を削除してみましょう。

let a = [1,2,3,4,5];

上記のような配列を作っておきます。

では削除します。

a.splice(3,1);

上記のように書いて削除出来たか確認してみましょう。

for (let i = 0; i < 4; i++) {
    console.log(a[i]);
}

「03回：配列for文」フォルダにindex11.htmlを作成し
「03回：配列for文」フォルダにmain11.jsを作成し保存します
/////////////////////演習11///////////////////////
1
2
3
5

と表示されたと思います。

a.splice(3,1);

の3というのは「配列の3番目を削除する」という意味です。
1というのは「配列から1個削除」という意味です。
まとめると、「配列の0から数えて3番目から1個の要素を削除する」という意味です。



次は2次元配列です。

///////////////////終わり///////////////////
///////////////////おまけ///////////////////
配列の中身をバラバラに作っておきます。
そしてそれを綺麗に並べる方法があります。

let a = [5,2,4,1,3];

a.sort();

上記のような書き方です。
下記のように書いて確認してみましょう。
for (let i = 0; i < 5; i++) {
    console.log(a[i]);
}
「03回：配列for文」フォルダにindex12.htmlを作成し
「03回：配列for文」フォルダにmain12.jsを作成し保存します
//////////////////演習12////////////////////
さらに、順番を逆にするには

a.reverse();

と書きます。